#! /usr/bin/env python
import os
import subprocess
import shutil
import urllib2
from distutils.dir_util import mkpath


WMT_EXE_INSTALL_PREFIX = '/usr/local/csdms'
WMT_EXE_REPO = 'https://github.com/csdms/wmt-exe'
HOMEBREW_REPO = 'https://github.com/Homebrew/linuxbrew'
MINICONDA = 'http://repo.continuum.io/miniconda'

SYSTEM_PROGS = ['git', 'gcc', 'g++', 'java']


def miniconda_url(version='3.7.0', python=''):
    if is_linux_os():
        os = 'Linux-x86_64'
    else:
        os = 'MacOSX-x86_64'
    file = 'Miniconda{python}-{version}-{os}.sh'.format(
        python=python, version=version, os=os)

    return '/'.join([MINICONDA, file])


class create_and_change_dir(object):
    def __init__(self, dir):
        self._dir = dir

    def __enter__(self):
        self._starting_dir = os.path.abspath(os.getcwd())
        if not os.path.isdir(self._dir):
            mkpath(self._dir)
        os.chdir(self._dir)
        return os.path.abspath(os.getcwd())

    def __exit__(self, type, value, traceback):
        os.chdir(self._starting_dir)


def which(prog):
    prog = os.environ.get(prog.upper(), prog)
    try:
        prog = subprocess.check_output(['which', prog],
                                       stderr=open('/dev/null', 'w')).strip()
    except subprocess.CalledProcessError:
        return None
    else:
        return prog


def which_git():
    return which('git')


def which_brew():
    return which('brew')


def which_python():
    return which('python')


def which_cc():
    return which('gcc')


def which_cxx():
    return which('g++')


def which_java():
    return which('java')


def gcc_version():
    version_s = subprocess.check_output([which_cc(), '-dumpversion']).strip()
    (major, minor, micro) = version_s.split('.')
    return '%s.%s' % (major, minor)


def brew_prefix():
    brew = which_brew()
    brew_bindir = os.path.dirname(brew)
    return os.path.dirname(brew_bindir)


def system(*args, **kwds):
    verbose = kwds.pop('verbose', False)

    status(' '.join(args[0]))

    if verbose:
        call = subprocess.check_call
    else:
        call = subprocess.check_output

    try:
        call(*args, **kwds)
    except subprocess.CalledProcessError:
        status('Error')
        raise


def ln_s(src, dst):
    if not os.path.exists(dst):
        system(['ln', '-s', src, dst])


def git_clone(url, git=None, dir='.'):
    git = git or which_git()

    with create_and_change_dir(dir) as dir:
        system([git, 'init', '-q'])
        system([git, 'config', 'remote.origin.url', url])
        system([git, 'config', 'remote.origin.fetch',
                '+refs/head/*:refs/remotes/origin/*'])
        system([git, 'fetch', 'origin',
                'master:refs/remotes/origin/master', '-n', '--depth=1'])
        system([git, 'reset', '--hard', 'origin/master'])


def git_pull(url, dir='.'):
    with create_and_change_dir(dir) as dir:
        system(['git', 'checkout', '-q', 'master'])
        system(['git', 'pull', 'origin', '-q',
                'refs/heads/master:refs/remotes/origin/master'])


def git_clone_or_update(url, dir='.'):
    if os.path.isdir(dir):
        status('Cloning %s' % url)
        git_pull(url, dir=dir)
    else:
        status('Updating %s' % url)
        git_clone(url, dir=dir)


def brew(formula, brew=None, taps=[], args=[]):
    brew = brew or which_brew()

    for tap in taps:
        system([brew, 'tap', tap])
    system([brew, 'install', formula] + args)


def is_linux_os():
    import sysconfig
    return sysconfig.get_platform().startswith('linux')


def status(message):
    print ' '.join(['==>', message])


def prepend_path(var, path):
    if var in os.environ:
        os.environ[var] = os.pathsep.join([path, os.environ[var]])
    else:
        os.environ[var] = path


def create_and_prepend_path(var, path):
    mkpath(path)
    prepend_path(var, path)


def python_version(python):
    return subprocess.check_output(
        [python, '-c', 'import sys; print(sys.version[:3])']).strip()


def python_site_packages(python):
    return os.path.join('lib', 'python%s' % python_version(python),
                        'site-packages')


def install_homebrew(prefix, dir='.'):
    if is_linux_os():
        with create_and_change_dir(dir) as dir:
            bindir = os.path.join(dir, 'bin')
            ln_s(which_cc(), os.path.join(bindir, 'gcc-%s' % gcc_version()))
            ln_s(which_cxx(), os.path.join(bindir, 'g++-%s' % gcc_version()))
            ln_s(which_python(), os.path.join(bindir, 'python'))


def install_wmt_exe(prefix, dir='.'):
    with create_and_change_dir(dir) as dir:
        create_and_prepend_path(
            'PYTHONPATH', os.path.join(
                prefix, python_site_packages(which('python'))))

        configure_args = [
            '--wmt-prefix=%s' % os.path.join(prefix, 'homebrew'),
            '--components-prefix=%s' % os.path.join(prefix, 'homebrew'),
            '--clobber',
            ]

        system(['python', 'setup.py', 'configure'] + configure_args)
        system(['python', 'setup.py', 'develop', '--prefix=%s' % prefix])

        etc_dir = os.path.join(prefix, 'etc')
        mkpath(etc_dir)
        shutil.copy('wmt.cfg', etc_dir)

        #system(['wmt-quickstart', '--batch'])


def install_csdms_stack(prefix):

    prepend_path('PATH', os.path.join(prefix, 'homebrew', 'bin'))
    prepend_path('LD_LIBRARY_PATH', os.path.join(prefix, 'homebrew', 'lib'))

    args = ['--HEAD', '-v']
    if is_linux_os():
        args += ['--with-java=/usr/local/java/bin/java',
                 '--with-python=/usr/local/epd/bin/python']

    brew('cmi', taps=['csdms/tools', 'csdms/models', 'csdms/dupes'], args=args)


def download_miniconda():
    status('Fetching %s' % miniconda_url())

    try:
        response = urllib2.urlopen(miniconda_url())
    except urllib2.HTTPError as error:
        raise
    except urllib2.URLError as error:
        raise
    else:
        with open('miniconda.sh', 'w') as destination:
            shutil.copyfileobj(response, destination)

    return os.path.abspath('miniconda.sh')


def install_python(prefix, dir='.'):
    import urllib2
    
    if not os.path.isfile('miniconda.sh'):
        download_miniconda()

    install_dir = os.path.join(prefix, dir)

    if not os.path.isdir(install_dir):
        system(['bash', 'miniconda.sh', '-b', '-p', install_dir])

    conda = os.path.join(install_dir, 'bin', 'conda')
    system([conda, 'update', 'conda'])

    env_bindir = os.path.join(install_dir, 'envs', 'wmt', 'bin')

    if not os.path.isdir(env_bindir):
        requirements = ['python=2.7', 'numpy', 'scipy', 'setuptools']
        system([conda, 'create', '-n', 'wmt'] + requirements)

    return os.path.join(env_bindir, 'python')


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('--install-prefix',
                        default=WMT_EXE_INSTALL_PREFIX,
                        help='Install prefix for wmt-exe')
    parser.add_argument('--verbose', action='store_true',
                        help='Be verbose')
    parser.add_argument('--with-python', default='internal',
                         metavar='PYTHON',
                         help='Path to Python executable [internal]')
    parser.add_argument('--with-brew', default='internal',
                         metavar='BREW',
                         help='Path to brew executable [internal]')

    for prog in SYSTEM_PROGS:
        parser.add_argument(
            '--with-%s' % prog, default=which(prog),
            metavar=prog.upper(), required=not which(prog),
            help='Path to %s executable [%s]' % (prog, which(prog)))

    args = parser.parse_args()

    for prog in SYSTEM_PROGS:
        os.environ.setdefault(prog.upper(), getattr(args, 'with_' + prog))

    install_prefix = os.path.abspath(args.install_prefix)

    with create_and_change_dir(install_prefix) as dir:
        if args.with_python == 'internal':
            os.environ['PYTHON'] = install_python(install_prefix,
                                                  dir='miniconda')
        else:
            os.environ.setdefault('PYTHON', args.with_python)

        if args.with_brew == 'internal':
            git_clone_or_update(HOMEBREW_REPO, dir='homebrew')
            install_homebrew(install_prefix, dir='homebrew')
        else:
            os.environ.setdefault('BREW', args.with_brew)

        git_clone_or_update(WMT_EXE_REPO, dir='wmt-exe')

        install_csdms_stack(install_prefix)
        install_wmt_exe(install_prefix, dir='wmt-exe')

    status('Finished')
