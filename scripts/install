#! /usr/bin/env python
import os
import sys
import subprocess
import shutil
import urllib2
import platform
from datetime import datetime
from distutils.dir_util import mkpath


BUILD_ENVIRON = {
    'PATH': os.pathsep.join(['/usr/bin', '/bin', '/usr/sbin', '/sbin',
                             '/etc', '/usr/lib']),
}

MAC_OS_NAME = {
    '10.6': 'Snow Leopard',
    '10.7': 'Lion',
    '10.8': 'Mountain Lion',
    '10.9': 'Mavericks',
    '10.10': 'Yosemite',
}


def check_output(*args, **kwds):
    kwds.setdefault('stdout', subprocess.PIPE)
    return subprocess.Popen(*args, **kwds).communicate()[0]


def total_seconds(dt):
    return (dt.microseconds +
            (dt.seconds + dt.days * 24 * 3600.) * 1e6) / 1e6


def miniconda_url(version='3.7.0', python='', url=None):
    url = url or 'http://repo.continuum.io/miniconda'

    if is_linux_os():
        os = 'Linux-x86_64'
    else:
        os = 'MacOSX-x86_64'
    file = 'Miniconda{python}-{version}-{os}.sh'.format(
        python=python, version=version, os=os)

    return '/'.join([url, file])


class cd(object):
    def __init__(self, dir):
        self._dir = dir

    def __enter__(self):
        self._starting_dir = os.path.abspath(os.getcwd())
        if not os.path.isdir(self._dir):
            mkpath(self._dir)
        os.chdir(self._dir)
        return os.path.abspath(os.getcwd())

    def __exit__(self, type, value, traceback):
        os.chdir(self._starting_dir)


def which(prog, env=None):
    prog = os.environ.get(env or prog.upper(), prog)

    try:
        prog = check_output(['which', prog],
                            stderr=open('/dev/null', 'w')).strip()
    except subprocess.CalledProcessError:
        return None
    else:
        return prog


def which_git():
    return which('git')


def which_brew():
    return which('brew')


def which_python():
    return which('python')


def which_cc():
    return which('gcc', env='CC')


def which_cxx():
    return which('g++', env='CXX')


def which_java():
    return which('java')


def gcc_version():
    version_s = check_output([which_cc(), '-dumpversion']).strip()
    (major, minor, micro) = version_s.split('.')
    return '%s.%s' % (major, minor)


def brew_prefix():
    brew = which('BREW')
    brew_bindir = os.path.dirname(brew)
    return os.path.dirname(brew_bindir)


def system(*args, **kwds):
    verbose = kwds.pop('verbose', True)

    status(' '.join(args[0]))

    if verbose:
        call = subprocess.check_call
    else:
        call = check_output

    try:
        call(*args, **kwds)
    except subprocess.CalledProcessError:
        status('Error')
        raise


def ln_s(src, dst):
    if not os.path.exists(dst):
        system(['ln', '-s', src, dst])


def git_clone(url, git=None, dir='.'):
    git = git or which('git')

    with cd(dir):
        system([git, 'init', '-q'])
        system([git, 'config', 'remote.origin.url', url])
        system([git, 'config', 'remote.origin.fetch',
                '+refs/head/*:refs/remotes/origin/*'])
        system([git, 'fetch', 'origin',
                'master:refs/remotes/origin/master', '-n', '--depth=1'])
        system([git, 'reset', '--hard', 'origin/master'])


def git_pull(url, dir='.'):
    with cd(dir):
        system(['git', 'checkout', '-q', 'master'])
        system(['git', 'pull', 'origin', '-q',
                'refs/heads/master:refs/remotes/origin/master'])


def git_clone_or_update(url, dir='.'):
    if os.path.isdir(os.path.join(dir, '.git')):
        status('Updating %s' % url)
        git_pull(url, dir=dir)
    else:
        status('Cloning %s' % url)
        git_clone(url, dir=dir)


def brew_taps(brew):
    try:
        taps = check_output([brew, 'tap']).split()
    except subprocess.CalledProcessError:
        return []
    else:
        return taps


def brew_tap(taps, brew=None):
    brew = brew or which('brew')

    tapped = brew_taps(brew)
    for tap in set(taps) - set(tapped):
        system([brew, 'tap', tap])


def brew(formula, brew=None, taps=[], args=[]):
    brew = brew or which('brew')

    prepend_path('PATH', os.path.dirname(which('ruby')))

    brew_tap(taps)
    system([brew, 'install', formula] + args)


def is_linux_os():
    return platform.system() == 'Linux'


def status(message):
    print ' '.join(['==>', message])


def prepend_path(var, path):
    path = os.path.normpath(path)

    try:
        paths = os.environ[var].split(os.pathsep)
    except KeyError:
        paths = []
    else:
        paths = [os.path.normpath(p) for p in paths]

    try:
        paths.remove(path)
    except ValueError:
        pass

    os.environ[var] = os.pathsep.join([path] + paths)


def create_and_prepend_path(var, path):
    mkpath(path)
    prepend_path(var, path)


def python_version(python, micro=False):
    ver = check_output(
            [python, '-c',
             'import platform; print(platform.python_version())']).strip()
    if micro:
        return ver
    else:
        return '.'.join(ver.split('.')[:2])


def python_site_packages(python):
    return os.path.join('lib', 'python%s' % python_version(python),
                        'site-packages')


def fetch_homebrew(dir='.', url=None):
    if url is None:
        if is_linux_os():
            url = 'https://github.com/Homebrew/linuxbrew'
        else:
            url = 'https://github.com/Homebrew/homebrew'

    git_clone_or_update(url, dir=dir)


def fetch_wmt_exe(dir='.', url=None):
    git_clone_or_update(url or 'https://github.com/csdms/wmt-exe', dir=dir)


def install_homebrew(prefix, dir='.'):
    with cd(prefix) as base:
        fetch_homebrew(dir=dir)

        if is_linux_os():
            with cd(os.path.join(dir, 'bin')):
                ln_s(which_cc(), 'gcc-%s' % gcc_version())
                ln_s(which_cxx(), 'g++-%s' % gcc_version())
                ln_s(which_python(), 'python')

    brew = os.path.join(prefix, dir, 'bin', 'brew')

    system([brew, 'update'])

    prepend_path('PATH', os.path.join(prefix, dir, 'bin'))
    prepend_path('LD_LIBRARY_PATH', os.path.join(prefix, dir, 'lib'))

    return os.path.abspath(brew)



def install_wmt_exe(prefix, dir='.'):
    create_and_prepend_path(
        'PYTHONPATH', os.path.join(
            prefix, python_site_packages(which_python())))

    with cd(os.path.join(prefix, 'opt', 'wmt-exe')):
        fetch_wmt_exe()

        system([
            which_python(), 'setup.py', 'configure',
            '--wmt-prefix=%s' % prefix,
            '--components-prefix=%s' % prefix,
            '--clobber',
        ])
        system([which_python(), 'setup.py', 'develop'])

        etcdir = os.path.join(prefix, 'etc')
        mkpath(etcdir)

        shutil.copy('wmt.cfg', etcdir)


def install_csdms_stack(prefix):
    taps = ['csdms/tools', 'csdms/models', 'homebrew/science']
    if is_linux_os():
        taps.append('csdms/dupes')
    brew_tap(taps)

    if is_linux_os():
        brew('csdms/dupes/netcdf', args=['--enable-fortran'])
    else:
        brew('homebrew/science/netcdf', args=['--enable-fortran'])

    opt_with_python = '--with-python=%s' % which('python')

    if is_linux_os():
        brew('csdms/tools/babel',
             args=['--with-java=%s' % which('java'), opt_with_python])
    else:
        brew('csdms/tools/babel', args=[opt_with_python])

    brew('csdms/tools/cca-spec-babel')
    brew('csdms/tools/bocca', args=[opt_with_python])
    brew('csdms/tools/boccatools', args=[opt_with_python])

    brew('csdms/models/child')
    brew('csdms/models/hydrotrend')
    brew('csdms/models/sedflux', args=['--HEAD'])
    brew('csdms/models/cem', args=['--HEAD'])

    brew('csdms/tools/esmf')
    if is_linux_os():
        brew('csdms/tools/esmpy', args=[opt_with_python])
    else:
        brew('csdms/tools/esmpy')

    brew('csdms/tools/coupling', args=[opt_with_python, '-v'])
    brew('csdms/tools/cmi', args=['--HEAD'])


def checksum_matches(path, md5):
    import hashlib

    if md5 is None:
        return False

    hasher = hashlib.md5()
    with open(path, 'r') as contents:
        hasher.update(contents.read())

    return hasher.hexdigest() == md5


def download_miniconda(dest, cache='.'):
    return download_url(miniconda_url(), dest, cache=cache,
                        md5='2656c37fd8a1a384650d7f09407a0893')


def download_argparse(dest, cache='.'):
    url = 'https://argparse.googlecode.com/hg/argparse.py'
    md5 = None

    return download_url(url, dest, cache=cache, md5=md5)


def install_argparse():
    import tempfile
    tmp_dir = tempfile.mkdtemp(prefix='wmt', suffix='.d')
    download_argparse('argparse.py', cache=tmp_dir)
    print tmp_dir
    return tmp_dir


def download_url(url, dest, md5=None, cache='.'):
    md5 = '2656c37fd8a1a384650d7f09407a0893'

    dest = os.path.abspath(os.path.join(cache, dest))

    if os.path.exists(dest):
        if checksum_matches(dest, md5):
            status('md5 %s' % url)
            return dest
        else:
            os.remove(dest)

    status('Fetching %s' % url)

    try:
        response = urllib2.urlopen(url)
    except urllib2.HTTPError as error:
        raise
    except urllib2.URLError as error:
        raise
    else:
        with open(dest, 'w') as destination:
            shutil.copyfileobj(response, destination)

    return os.path.abspath(dest)



def set_build_environ(keep=['HOME', 'USER', 'TERM'], env=None):
    import getpass

    for key in os.environ.keys():
        if key not in keep:
            del os.environ[key]
    os.environ.update(env)
    os.environ.setdefault('HOME', os.path.expanduser('~'))
    os.environ.setdefault('USER', getpass.getuser())
    os.environ.setdefault('TERM', 'xterm-256color')

    prepend_path('PATH', os.path.dirname(which('ruby')))


def install_python(prefix, dir='.'):
    import urllib2

    cache = os.path.join(prefix, 'var', 'cache')
    with cd(cache):
        miniconda = download_miniconda('miniconda.sh')

    conda_prefix = os.path.join(prefix, 'opt', 'conda')
    with cd(conda_prefix) as base:
        conda = os.path.join(base, 'bin', 'conda')

        env_bindir = os.path.join(base, 'envs', 'wmt', 'bin')

        if not os.path.exists(conda):
            system(['bash', miniconda, '-f', '-b', '-p', base])

            system([conda, 'config',
                    '--set', 'always_yes', 'yes',
                    '--set', 'changeps1', 'no'])
            system([conda, 'update', 'conda'])

        if not os.path.isdir(env_bindir):
            system([conda, 'create', '-n', 'wmt', 'python=2.7'])

        system([conda, 'install', '-n', 'wmt',
                'numpy', 'scipy', 'setuptools', 'netcdf4'])

        system([conda, 'update', '-n', 'wmt', '--all'])

        ln_s(os.path.join(env_bindir, 'python'),
             os.path.join(prefix, 'bin', 'python'))

    return os.path.join(env_bindir, 'python')


def print_summary(start, end):
    print 'Started: %s' % start
    print 'Finished: %s' % end
    print 'Build time: %d seconds' % total_seconds(end - start)

    print 'Build system: %s' % platform.system()
    if platform.system() == 'Darwin':
        ver = platform.mac_ver()[0]
        major_minor = '.'.join(ver.split('.')[:2])
        print 'Mac OSX: %s (%s)' % (ver, MAC_OS_NAME[major_minor])
    else:
        print 'Linux distribution: %s' % '-'.join(platform.linux_distribution())
    print 'Python version: %s' % python_version(which_python(), micro=True)
    print 'Build environment:'
    for item in os.environ.items():
        print '- %s: %s' % item


if __name__ == '__main__':
    try:
        import argparse
    except ImportError:
        tmp = install_argparse()
        sys.path.append(tmp)
        try:
            import argparse
        except ImportError:
            raise
        finally:
            shutil.rmtree(tmp)

    git = which('git')
    cc = which('gcc', env='CC')
    cxx = which('g++', env='CXX')
    java = which('java')
    ruby = which('ruby')

    parser = argparse.ArgumentParser()
    parser.add_argument('prefix', help='Install prefix for wmt-exe')
    parser.add_argument('--verbose', action='store_true',
                        help='Be verbose')

    parser.add_argument('--with-python', default='internal',
                         metavar='PYTHON',
                         help='Path to Python executable [internal]')
    parser.add_argument('--with-brew', default='internal',
                         metavar='BREW',
                         help='Path to brew executable [internal]')

    parser.add_argument('--with-git', default=git, metavar='git',
                        required=not git,
                        help='Path to git executable [%s]' % git)
    parser.add_argument('--with-cc', default=cc,
                        metavar='cc', required=not cc,
                        help='Path to C compiler [%s]' % cc)
    parser.add_argument('--with-cxx', default=cxx,
                        metavar='cxx', required=not cxx,
                        help='Path to C++ compiler [%s]' % cxx)
    parser.add_argument('--with-java', default=java,
                        metavar='java', required=not java,
                        help='Path to Java executable [%s]' % java)
    parser.add_argument('--with-ruby', default=ruby, metavar='ruby',
                        required=not ruby,
                        help='Path to ruby executable [%s]' % ruby)

    args = parser.parse_args()

    BUILD_ENVIRON.update({
        'GIT': args.with_git,
        'CC': args.with_cc,
        'CXX': args.with_cxx,
        'JAVA': args.with_java,
        'RUBY': args.with_ruby,
    })
    set_build_environ(env=BUILD_ENVIRON)

    start = datetime.now()

    install_prefix = os.path.abspath(args.prefix)
    with cd(install_prefix) as base:
        for dir in ['bin', 'etc', 'tmp', 'var/log', 'var/cache', 'opt', 'local']:
            if not os.path.isdir(dir):
                mkpath(dir)

    if args.with_python == 'internal':
        os.environ['PYTHON'] = install_python(install_prefix)
    else:
        os.environ.setdefault('PYTHON', args.with_python)

    if args.with_brew == 'internal':
        os.environ['BREW'] = install_homebrew(install_prefix, dir='local')
    else:
        os.environ.setdefault('BREW', args.with_brew)

    with cd(install_prefix) as dir:
        install_csdms_stack(dir)
        install_wmt_exe(dir)

    end = datetime.now()

    status('Finished')
    status('Summary')
    print_summary(start, end)
